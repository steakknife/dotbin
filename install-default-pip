#!/usr/bin/env ruby
# ~/.default-gems.rb
require 'yaml'
require 'tempfile'

# --user install so it's local to the user, not the whole system
# --install-option=--prefix= workaround for brewed python
# --upgrade so packages are always up-to-date
# --egg ???? probably for some package to avoid compiling
SYSTEM_PIP_INSTALL = %w[install --user --upgrade]
       PIP_INSTALL = %w[install --user --install-option=--prefix= --upgrade]
UNVERIFIED = %w[Pyrex]
EXTERNAL = %w[Pyrex z3c.zcmlhook z3c.caching]

# no operator precedence!

HOME = ENV['HOME'] || ENV['HOMEDIR']
DRY_RUN = ENV['DRY_RUN']

FILES = ['/etc/default-pip.yaml', '/usr/local/etc/default-pip.yaml', File.join(HOME, '.default-pip.yaml')]


def append_env(string_or_nil)
  string_or_nil ? (string_or_nil + ' ') : ''
end

def system_pip
  Dir[File.expand_path('~/Library/Python/*/bin/pip')][0]
end

def system_python_config
  Dir['/usr/bin/python-config'][0]
end

def system_python
  Dir['/usr/bin/python'][0]
end

def ldflags_to_libdirs(ldflags)
  ldflags.split(' ')
         .select { |x| x =~ /\A-L/ }
         .map { |x| x =~ /\A-L(.+)\z/; $1 }
         .join(':')
end

PIP_EXES = { 'python2' => 'pip2',
             'python3' => 'pip3',
             'system'  => system_pip }

PYTHON_CONFIG_EXES = { 'python2' => 'python2-config',
                       'python3' => 'python3-config',
                       'system'  => system_python_config }

PYTHON_EXES = { 'python2' => 'python2',
                'python3' => 'python3',
                'system'  => system_python }

ALL_ENGINES = 'system python2 python3'
ALL_OSES = 'solaris freebsd openbsd netbsd linux osx windows'
OR_OPERATORS = '|| | or'
AND_OPERATORS = '&& & and'
NOT_OPERATORS = '! ~ ^ - not'


def show_env
  %w[CPPFLAGS CFLAGS CXXFLAGS LDFLAGS LINKFLAGS PYTHON PYTHON_CONFIG PYTHON_PREFIX PYTHONPATH PYTHON_VERSION PKG_CONFIG_PATH LD_LIBRARY_PATH].each { |x|
    puts "#{x}=#{ENV[x]}"
  }
end


def install_system_pip
  unless system 'python <(curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py) --user'
    fail 'Unable to install system pip' 
  end
end

def debug(*args)
  puts args if $DEBUG
end

def detect_os
  uname = `uname`.chop.downcase
  case uname
  when 'solaris', 'freebsd', 'netbsd', 'linux'
    uname
  when 'darwin'
    'osx'
  when 'cygwin', RUBY_PLATFORM =~ /win(32|dows|ce)|(ms|cyg|bcc)win|mingw32|djgpp/i || ENV['OS'] == 'Windows_NT'
    'windows'
  else
    'unknown'
  end
end

def os
  @os ||= detect_os
end

def readlink_abs(link)
  result = nil
  FileUtils.cd(File.dirname(link)) do
    real = `readlink "#{link}"`.chop!
    FileUtils.cd(File.dirname(real)) do
      result = File.join(Dir.pwd, File.basename(real))
    end
  end
  result
end

def which(exe)
  `which "#{exe}"`.chop!
end

def match?(string, engine)
  result = false
  first = true
  operator = :or
  tokens = string.downcase.split
  fail 'missing tokens' if tokens.empty?
  debug "processing #{tokens}"
  tokens.each {|token|
    if first
      return true if 'standard' == token
    else # not first
      if OR_OPERATORS.include? token 
        operator = :or
        next
      elsif AND_OPERATORS.include? token 
        operator = :and
        next
      elsif NOT_OPERATORS.include? token
        if operator == :and
          operator = :not_and 
        elsif operator == :or
          operator = :not_or
        else
          fail 'Bad placement of a not operator'
        end
        next
      end
    end

    if '!^-~'.include? token[0]
      token = token[1..-1]
      invert = true
    else
      invert = false
    end

    current = if ALL_OSES.include?(token)
      token == os
    elsif ALL_ENGINES.include?(token)
      token == engine
    elsif system_engine_ver == 2
      token == 'system_python2' && engine == 'system'
    elsif system_engine_ver == 3
      token == 'system_python3' && engine == 'system'
    else
      fail 'invalid os or python engine' 
    end

    current = !current if invert

    case operator
    when :or
      result ||= current
    when :and
      result &&= current
    when :not_or
      result ||= !current
    when :not_and
      result &&= !current
    end

    operator = :or
    first = false
  }
  debug "match? #{string} = #{result}"
  result
end

def resolve_exe(x)
  x = which(x)
  x = readlink_abs(x) if File.symlink? x
  x
end

def pip_exe(engine)
  resolve_exe PIP_EXES[engine]
end

def python_config_exe(engine)
  resolve_exe PYTHON_CONFIG_EXES[engine]
end

def python_exe(engine)
  resolve_exe PYTHON_EXES[engine]
end

def pip_install(*packages, engine)
  packages = packages.flatten
  if engine == 'system'
    install_system_pip unless system_pip
  end
  args = [ pip_exe(engine) ]
  args += (engine == 'system') ? SYSTEM_PIP_INSTALL : PIP_INSTALL
  args += packages
  args += UNVERIFIED.select { |x| packages.any? { |z| /#{x}/i.match(z) } }
                    .map { |y| ['--allow-unverified', y]  }
                    .flatten

  args += EXTERNAL.select { |x| packages.any? { |z| /#{x}/i.match(z) } }
                  .map { |y| ['--allow-external', y] }
                  .flatten

  puts args.join ' '
  unless DRY_RUN
    system(*args)
    fail 'pip install failed' unless $?.success?
  end
end

def fix_shebangs(python_exe)
  Dir['**/*'].select { |x| File.file? x }
             .each { |y| `sed -i '' '1s%^#!.*python.*$%#!#{python_exe}%g' #{y}` }
end

#def fix_wscript(python_exe)
#  `sed -i '' "s/ctx.check_tool('python')/ctx.check_tool('#{python_exe}')/g" wscript`
#  `sed -i '' "s/ctx.tool_options('python')/ctx.tool_options('#{python_exe}')/g" wscript`
#end

def manual_install(packages, engine)
  puts "#{engine} manual install #{packages}"
  packages.each { |url|
    tempfile = Tempfile.new('manual_install')
    unless system "curl -L '#{url}' -o '#{tempfile.path}'"
      fail "Unable to download #{url}"
    end
    Dir.mktmpdir('manual_install') do |temppath|
      unless system "tar xf '#{tempfile.path}' -C '#{temppath}'"
        fail "Unable to extract #{url}"
      end

      python_prefix = %x[#{python_config_exe(engine)} --prefix].chomp
      python_exe = python_exe(engine)

      FileUtils.cd(temppath) do 
        dirs = Dir['*'].select { |x| File.directory? x}
        FileUtils.cd(dirs[0]) do
          fix_shebangs(python_exe)
          cmd = case
          when File.exist?('setup.py')
            args = [python_exe, 'setup.py', 'install']
            args << '--user' if engine == 'system'
            args.join(' ')
          when File.exist?('waf')
            "./waf configure --prefix=#{python_prefix} && ./waf build && ./waf install"
          when File.exist?('configure')
            "./configure --prefix=#{python_prefix} && make && make install"
          else
            system 'bash' 
            fail "Dont know how to install #{url}"
          end
          puts cmd
          unless system(cmd)
            system 'bash' 
            fail "Unable to install #{url}"
          end
        end
      end
    end
  } unless DRY_RUN
end

def run_file(filename, engine)
  debug "running #{filename}"
  YAML.load_file(filename).each { |item|
    if item.is_a? Hash
      item.each { |package, condition| 
        if match? condition, engine
          if package =~ /:\/\//
            manual_install package, engine
          else
            pip_install package, engine
          end
        end
      }
    else
      if item =~ /:\/\//
        manual_install item, engine
      else
        pip_install item, engine 
      end
    end
  }
end

def detect_system_engine_ver
  result = case (%x[python --version 2>&1].chop rescue nil)
  when /\APython 3/
    3
  when /\APython 2/
    2
  when nil
    ''
  end
  puts "system version = #{result}"
  result
end

def system_engine_ver
  @system_engine_ver ||= detect_system_engine_ver
end

def detect_engines
  x = []
  x << 'python2' if system 'which python2 >/dev/null 2>&1'
  x << 'python3' if system 'which python3 >/dev/null 2>&1'
  x << 'system'  if system_engine_ver
  x
end

def engines
  @engines ||= detect_engines
end

debug "os=#{os}"
debug "engines=#{engines}"
debug "system_ver=#{system_engine_ver}"


orig_CPPFLAGS = ENV['CPPFLAGS']
orig_CFLAGS = ENV['CFLAGS']
orig_CXXFLAGS = ENV['CXXFLAGS']
orig_LDFLAGS = ENV['LDFLAGS']
orig_LINKFLAGS = ENV['LINKFLAGS']

# for Pillow
more_CFLAGS = '-Qunused-arguments'
# for py2cairo
more_LINKFLAGS = '' #'-search_dylibs_first'

ENV['PKG_CONFIG_PATH'] = '/opt/X11/lib/pkgconfig' # because brewed cairo .pc's are bad

engines.select { |x| ARGV.size == 0 || ARGV.include?(x) } 
       .map { |engine|
  debug "engine=#{engine}"
  ENV['PYTHON'] = python_exe(engine)
  ENV['PYTHON_CONFIG'] = python_config_exe = python_config_exe(engine)
#  ENV['PYTHON_PREFIX'] = %x(#{python_config_exe} --prefix).chop!
#  ENV['LINKFLAGS'] = append_env(orig_LINKFLAGS) + 
#                     append_env(more_LINKFLAGS) +
#                     %x(#{python_config_exe} --ldflags).chop!
  if File.basename(python_config_exe) =~ /-?[[:digit:]]+\.?[[:digit:]]*/
    ENV['PYTHON_VERSION'] = $&
  end
  ENV['CPPFLAGS'] = append_env(orig_CPPFLAGS) +
                    append_env(more_CFLAGS) # + %x(#{python_config_exe} --include).chop!
  ENV['CFLAGS'] = append_env(orig_CFLAGS) +
                  append_env(more_CFLAGS) # + %x(#{python_config_exe} --include).chop!
  ENV['CXXFLAGS'] = append_env(orig_CXXFLAGS) +
                    append_env(more_CFLAGS) # + %x(#{python_config_exe} --include).chop!
  ENV['LDFLAGS'] = append_env(orig_LDFLAGS) # + %x(#{python_config_exe} --ldflags).chop!
  show_env

  FILES.each {|filename|
    run_file(filename, engine) if File.exist?(filename)
  }
}
