#!/usr/bin/env ruby
#
# downloads all Apple OS X sources to seperate directories
# 
# usage: apple_osx_oss_downloader [options | versions*]
# 
#      --list | -l   list osx versions instead of downloading sources
#
#      versions*  only download sources for versions
#  
#
# SECURITY NOTICE: downloads are INSECURE and UNTRUSTWORTHY because Apple's SSL cert doesn't seem to work with ruby
#
# copyright (c) 2014 Barry Allard
#
# license: MIT
#

TOP_DIR = 'appleoss' # files will be downloaded here

require 'fileutils'
require 'open-uri'
require 'openssl'
require 'time'

Signal.trap('INT') {
   $stderr.puts "\n\n  ! User aborted\n"
   exit 1
}

module AppleOSS
  ENDPOINT = 'https://opensource.apple.com/'

  RELEASE_REGEX = /<a href="(\/release\/(?:mac-)?os-x-[0-9]+\/)">[^0-9<]*([0-9][0-9.]*)/m
  START_LINE = /product-name">OS X</
  END_LINE = /product release-list/

  TARBALL_REGEX = /<a href="(\/tarballs\/[^"]+)"/

  def self.index_uncached
    $stderr.puts "Fetching #{ENDPOINT}"
    open(ENDPOINT).read
  end

  def self.index
    @index ||= self.index_uncached
  end

  def self.osx_release_html
    started, stopped = false, false
    self.index.split("\n").map { |line|
      next if stopped
      if started
        if line =~ END_LINE
          stopped = true
          next
        end
        line
      else
        started = true if line =~ START_LINE
      end 
    }.compact.join("\n")
  end
    

  def self.relative_release_urls
    Hash[self.osx_release_html.scan(RELEASE_REGEX).map { |x, y| [y, x] }]
  end

  def self.absolute_release_urls
    Hash[self.relative_release_urls.map { |version, relative_url|
      [version, URI.join(ENDPOINT, relative_url).to_s ]
    }]
  end

  def self.versions
    self.relative_release_urls.keys
  end

  def self.release_index_for_version_uncached(version)
    url = self.absolute_release_urls[version]
    $stderr.puts "Fetching #{url}"
    open(url).read
  end

  def self.release_index_for_version(version)
    (@release_indicies ||= {})[version] ||= self.release_index_for_version_uncached(version)
  end

  def self.relative_tarball_urls_for_version(version)
    (@relative_tarball_urls_for_version ||= {})[version] ||= self.release_index_for_version(version).scan(TARBALL_REGEX).flatten
  end

  def self.tarball_filenames_for_version(version)
    (@tarball_filenames_for_version ||= {})[version] ||= self.relative_tarball_urls_for_version(version).map { |uri| File.basename(uri) } 
  end

  def self.absolute_tarball_urls_for_version(version)
    (@absolute_tarball_urls_for_version ||= {})[version] ||= self.relative_tarball_urls_for_version(version).map { |relative_url|
      URI.join(ENDPOINT, relative_url).to_s
    }
  end

  def self.check_file(fn)
    Zlib::GzipReader.open(fn).read rescue false
  end

  ERASE = "\b" * 12

  def self.download_tarball(uri, fn)
    size = nil
    needs_erase = false
    content_length_proc = proc { |content_length|
      size = content_length
      $stderr.puts "  | Downloading #{size} byte(s) from #{uri}"
    }
    progress_proc = proc { |bytes_read_so_far| 
      $stderr.print ERASE + "    %.2f %" % percent = 100.0 * bytes_read_so_far / size 
      needs_erase = true
    }
    options = {
         content_length_proc: content_length_proc,
               progress_proc: progress_proc
    }
    options['If-Modified-Since'] = File.stat(fn).mtime.httpdate if File.exists? fn
    tries = 3
    begin
      open(uri, options) { |r| File.open(fn, 'wb') { |w| w.write(r.read) } }
      raise OpenURI::HTTPError.new "Bad download" unless self.check_file fn
    rescue OpenURI::HTTPError => e
      if needs_erase
        $stderr.print ERASE 
        needs_erase = false
      end
      if e.io.status[0].to_i == 304 && self.check_file(fn)
        $stderr.puts "  | Already downloaded #{uri}"
        return
      end
      options.delete 'If-Modified-Since'
      $stderr.puts "  | Retrying #{uri}"
      retry if (tries -= 1) >= 0
      raise
    end
    if needs_erase
      $stderr.print ERASE 
      needs_erase = false
    end
  end

  def self.download(version)
    $stderr.puts "Downloading source tarballs for #{version}"

    tarball_urls = self.absolute_tarball_urls_for_version(version)
    filenames = self.tarball_filenames_for_version(version)
    FileUtils.mkdir_p(TOP_DIR)
    Dir.chdir(TOP_DIR) do
      FileUtils.mkdir_p(version)
      Dir.chdir(version) do
        tarball_urls.zip(filenames).each { |uri, fn| self.download_tarball(uri, fn) }
      end
    end
  end

  def self.download_all
    self.versions.each { |version| self.download(version) }
  end
end

if ARGV.empty?
  AppleOSS.download_all
else
  if ARGV.delete('-l') || ARGV.delete('--list')
    puts AppleOSS.versions
    exit
  end
  # check input
  ARGV.map { |version| 
    unless AppleOSS.versions.include? version
      fail "Unknown version #{version}" 
    end
  }
  ARGV.map { |version| AppleOSS.download(version) }
end
